from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import logging
from app.config import settings
from app.database import create_tables
from app.routers import auth, sessions, assets, monitoring, training, ekyc_verification

# Logging setup
logging.basicConfig(
    level=getattr(logging, settings.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create FastAPI app with comprehensive OpenAPI documentation
app = FastAPI(
    title=settings.app_name,
    version=settings.version,
    description="""
## EKYC Service API

D·ªãch v·ª• x√°c minh danh t√≠nh ƒëi·ªán t·ª≠ (eKYC) s·ª≠ d·ª•ng AI v√† x·ª≠ l√Ω t√†i li·ªáu.

### T√≠nh nƒÉng ch√≠nh:
- üîê **JWT Authentication** - X√°c th·ª±c an to√†n
- üìÑ **OCR Processing** - Tr√≠ch xu·∫•t th√¥ng tin t·ª´ CMND/CCCD
- üë§ **Face Recognition** - Nh·∫≠n di·ªán khu√¥n m·∫∑t v·ªõi InsightFace
- üîç **Liveness Detection** - Ph√°t hi·ªán ·∫£nh selfie th·∫≠t
- üìä **Async Processing** - X·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô v·ªõi Celery
- üíæ **Secure Storage** - L∆∞u tr·ªØ file v·ªõi MinIO

### Workflow:
1. **ƒêƒÉng nh·∫≠p** ƒë·ªÉ l·∫•y JWT token
2. **T·∫°o session** EKYC m·ªõi
3. **Upload ·∫£nh CMND** (m·∫∑t tr∆∞·ªõc/sau)
4. **Upload ·∫£nh selfie** ƒë·ªÉ x√°c minh
5. **Nh·∫≠n k·∫øt qu·∫£** x√°c minh t·ª± ƒë·ªông

### API Response Format:
- T·∫•t c·∫£ API tr·∫£ v·ªÅ JSON format
- L·ªói ƒë∆∞·ª£c standardized v·ªõi error codes
- Async tasks c√≥ th·ªÉ theo d√µi qua task_id
    """,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_tags=[
        {
            "name": "Authentication",
            "description": "ƒêƒÉng nh·∫≠p v√† qu·∫£n l√Ω JWT tokens"
        },
        {
            "name": "EKYC Sessions", 
            "description": "Qu·∫£n l√Ω sessions x√°c minh danh t√≠nh"
        },
        {
            "name": "File Upload",
            "description": "Upload v√† x·ª≠ l√Ω ·∫£nh CMND, selfie"
        },
        {
            "name": "Monitoring",
            "description": "Health check v√† monitoring tasks"
        }
    ],
    contact={
        "name": "EKYC API Support",
        "email": "support@example.com",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(auth.router, prefix="/api/v1")
app.include_router(sessions.router, prefix="/api/v1")
app.include_router(assets.router, prefix="/api/v1")
app.include_router(monitoring.router, prefix="/api/v1")
app.include_router(training.router, prefix="/api/v1")
app.include_router(ekyc_verification.router, prefix="/api/v1")


@app.on_event("startup")
async def startup_event():
    """Initialize application on startup"""
    logger.info("Starting EKYC Service...")
    
    # Create database tables
    create_tables()
    logger.info("Database tables created/verified")
    
    logger.info("EKYC Service started successfully")


@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown"""
    logger.info("Shutting down EKYC Service...")


@app.get("/", tags=["Root"])
async def root():
    """Root endpoint with service information"""
    return {
        "service": settings.app_name,
        "version": settings.version,
        "status": "running",
        "docs": "/docs",
        "redoc": "/redoc"
    }


@app.get("/health", tags=["Monitoring"])
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": settings.app_name,
        "version": settings.version
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )
